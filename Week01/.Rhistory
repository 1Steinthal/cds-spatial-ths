knitr::opts_chunk$set(echo = TRUE)
install.packages("leaflet")
# to install the development version from Github, run
# devtools::install_github("rstudio/leaflet")
install.packages("tidyverse")
library(leaflet)
library(tidyverse)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
# Example with Markers
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%  # Name a specific  map from among free provider tiles
addAwesomeMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
## Sydney with setView
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery",
options = providerTileOptions(opacity=0.5)) %>%
setView(lng = 151.005006, lat = -33.971, zoom = 10)
# Europe with Layers
leaflet() %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 5 ) %>%
addProviderTiles("Esri.WorldPhysical", group = "Physical") %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("MtbMap", group = "Geo") %>%
addLayersControl(
baseGroups = c("Geo","Aerial", "Physical"),
options = layersControlOptions(collapsed = T))
# Set the location and zoom level
leaflet() %>%
setView(151.2339084, -33.85089, zoom = 13) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_aus <- leaflet() %>%   # assign the base location to an object
setView(151.2339084, -33.85089, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
# make sure you run the next three lines together else the for-loop will not work
for (provider in esri) {
l_aus <- l_aus %>% addProviderTiles(provider, group = provider)
}
# create the basic map document
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
AUSmap # display the map document
# Set the location and zoom level
leaflet() %>%
setView(56, -11, zoom = 13) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_dk <- leaflet() %>%   # assign the base location to an object
setView(56, -11, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
# make sure you run the next three lines together else the for-loop will not work
for (provider in esri) {
l_dk <- l_dk %>% addProviderTiles(provider, group = provider)
}
# create the basic map document
DKmap <- l_dk %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
DKmap # display the map document
# Set the location and zoom level
leaflet() %>%
setView(-11, 56, zoom = 13) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_dk <- leaflet() %>%   # assign the base location to an object
setView(-11, 56, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
# make sure you run the next three lines together else the for-loop will not work
for (provider in esri) {
l_dk <- l_dk %>% addProviderTiles(provider, group = provider)
}
# create the basic map document
DKmap <- l_dk %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
DKmap # display the map document
# Set the location and zoom level
leaflet() %>%
setView(10, 56, zoom = 13) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_dk <- leaflet() %>%   # assign the base location to an object
setView(10, 56, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
# make sure you run the next three lines together else the for-loop will not work
for (provider in esri) {
l_dk <- l_dk %>% addProviderTiles(provider, group = provider)
}
# create the basic map document
DKmap <- l_dk %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
DKmap # display the map document
# Libraries
library(tidyverse)
library(googlesheets4)
library(leaflet)
gs4_deauth() # if the authentication is not working for you
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=1817942479",
range = "SA2022",
col_types = "cccnncnc")
glimpse(places)
leaflet() %>%
addTiles() %>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("leaflet")
# to install the development version from Github, run
# devtools::install_github("rstudio/leaflet")
library(leaflet)
library(tidyverse)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
# Example with Markers
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%  # Name a specific  map from among free provider tiles
addAwesomeMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
## Sydney with setView
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery",
options = providerTileOptions(opacity=0.5)) %>%
setView(lng = 151.005006, lat = -33.971, zoom = 10)
# Europe with Layers
leaflet() %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 5 ) %>%
addProviderTiles("Esri.WorldPhysical", group = "Physical") %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("MtbMap", group = "Geo") %>%
addLayersControl(
baseGroups = c("Geo","Aerial", "Physical"),
options = layersControlOptions(collapsed = T))
# Set the location and zoom level
leaflet() %>%
setView(151.2339084, -33.85089, zoom = 13) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_aus <- leaflet() %>%   # assign the base location to an object
setView(151.2339084, -33.85089, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
# make sure you run the next three lines together else the for-loop will not work
for (provider in esri) {
l_aus <- l_aus %>% addProviderTiles(provider, group = provider)
}
# create the basic map document
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
AUSmap # display the map document
library(htmlwidgets)
saveWidget(AUSmap, "AUSmap.html", selfcontained = TRUE)
# Set the location and zoom level
leaflet() %>%
setView(10, 56, zoom = 13) %>%
addTiles()  # checking I am in the right area
# Bring in a choice of esri background layers
l_dk <- leaflet() %>%   # assign the base location to an object
setView(10, 56, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
# make sure you run the next three lines together else the for-loop will not work
for (provider in esri) {
l_dk <- l_dk %>% addProviderTiles(provider, group = provider)
}
# create the basic map document
DKmap <- l_dk %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
DKmap # display the map document
# Libraries
library(tidyverse)
library(googlesheets4)
library(leaflet)
gs4_deauth() # if the authentication is not working for you
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=1817942479",
range = "SA2022",
col_types = "cccnncnc")
glimpse(places)
leaflet() %>%
addTiles() %>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
# YOUR CODE
###   PLOTTING IN LEAFLET USING ONLINE DATA FROM CA
###   Example from UC Davis RUser group
###   https://ryanpeek.github.io/2017-08-03-converting-XY-data-with-sf-package/
# Packages
# install.packages("htmltools")
# install.packages("leaflet")
# Load libraries
suppressMessages({
library(tidyverse)
library(sf)
library(htmltab)
})
# install.packages("htmltools")
# install.packages("leaflet")
install.packages("sf")
# Load libraries
suppressMessages({
library(tidyverse)
library(sf)
library(htmltab)
})
install.packages("htmltools")
install.packages("htmltools")
pacman::p_load(htmltab)
knitr::opts_chunk$set(echo = TRUE)
install.packages("pacman")
library/pacman
library(pacman)
pacman::p_load(htmltabs)
# install.packages("tidyverse")
# install.packages("leaflet")
install.packages("htmltools")
# install.packages("tidyverse")
# install.packages("leaflet")
install.packages("htmltools")
install.packages("htmltools")
R-- version
R.version
# install.packages("tidyverse")
# install.packages("leaflet")
install.packages("htmltools")
install.packages("htmltab")
